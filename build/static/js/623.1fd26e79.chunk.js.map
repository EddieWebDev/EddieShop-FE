{"version":3,"file":"static/js/623.1fd26e79.chunk.js","mappings":"2OAEaA,EAAoBC,EAAAA,EAAAA,IAAM,sEAM1BC,EAAmBD,EAAAA,EAAAA,IAAM,kKAUzBE,EAAaF,EAAAA,EAAAA,IAAM,0E,mBCkDhC,EAzDmB,WACjB,IAAQG,GAAaC,EAAAA,EAAAA,MAAbD,SAEFE,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GAExB,ECbsC,SAACJ,GACvC,OAAOK,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,uBAAwBN,GACnCO,QAAS,kBAAMC,EAAAA,EAAAA,IAAsBR,EAAS,EAC9CS,UAAWT,GAEf,CDQIU,CAAyBV,GADnBW,EAAI,EAAJA,KAAMC,EAAgB,EAAhBA,iBAAkBC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAGzC,OAAIF,GACK,yBAAK,eAGVC,GACK,yBAAMC,EAAMC,WAInB,8BACE,4BACE,wBAAKf,KACL,SAACJ,EAAiB,UACfe,GACCA,EAAKK,KAAI,SAACC,GAAO,OACf,UAACnB,EAAgB,YACf,UAAC,KAAI,CAACoB,GAAE,mBAAcD,EAAQE,IAAK,WACjC,wBAAKF,EAAQG,eACb,SAACrB,EAAU,CACTsB,IAAG,UAAKJ,EAAQK,iBAChBC,IAAG,UAAKN,EAAQG,kBAGnBH,EAAQO,MAAQ,GACf,SAAC,KAAe,CAACC,UAAU,mBAAmBC,UAAQ,WAAC,kBAIvD,SAAC,KAAe,CACdC,QAAS,kBACPzB,EAAK0B,aACHX,EAAQE,GACRF,EAAQG,YACRH,EAAQY,MACRZ,EAAQO,MACT,EACF,SACF,kBAtBkBP,EAAQE,GA0BZ,UAMjC,C,wMEhEMW,E,QAAcC,EAAAA,OAAa,CAC/BC,QAAS,0BAQEC,EAAc,yCAAG,WAAOd,GAAE,4FACdW,EAAYI,IAAI,iBAAD,OAAkBf,IAAM,KAAD,EAA/C,OAARgB,EAAQ,yBACPA,EAASxB,MAAI,2CACrB,gBAH0B,sCAKdH,EAAqB,yCAAG,WAAOR,GAAQ,4FAC3B8B,EAAYI,IAAI,0BAAD,OAA2BlC,IAAY,KAAD,EAA9D,OAARmC,EAAQ,yBACPA,EAASxB,MAAI,2CACrB,gBAHiC,sCAKrByB,EAAa,yCAAG,WAAOC,GAAU,sFACtCP,EAAYQ,KAAK,gBAAiBD,GAAY,KAAD,sCACpD,gBAFyB,sCAIbE,EAAa,yCAAG,WAAOC,GAAc,4EACtC,OAAFrB,EAAOqB,EAAPrB,GAAE,SACJW,EAAYW,IAAI,iBAAD,OAAkBtB,GAAMqB,GAAgB,KAAD,sCAC7D,gBAHyB,sCAKbE,EAAa,yCAAG,WAAOvB,GAAE,sFAC9BW,EAAYa,OAAO,iBAAD,OAAkBxB,IAAM,KAAD,sCAChD,gBAFyB,sCAIbyB,EAAa,yCAAG,WAAOC,GAAU,4FACrBf,EAAYI,IAAI,wBAAD,OAAyBW,IAAc,KAAD,EAA9D,OAARV,EAAQ,yBACPA,EAASxB,MAAI,2CACrB,gBAHyB,qC","sources":["styles/styledProducts.jsx","pages/Category/Category.jsx","queries/products/hooks/useGetProductsByCategory.jsx","queries/products/Products.jsx"],"sourcesContent":["import tw from \"tailwind-styled-components\";\r\n\r\nexport const ProductsContainer = tw.div`\r\n    flex\r\n    flex-wrap\r\n    gap-8\r\n    my-4\r\n`;\r\nexport const ProductContainer = tw.div`\r\n    flex\r\n    flex-col\r\n    p-2\r\n    border-4\r\n    border-primary-darkgreen\r\n    bg-primary-darkbeige\r\n    items-center\r\n    text-center\r\n`;\r\nexport const ProductImg = tw.img`\r\n    my-4\r\n    w-96\r\n    h-56\r\n    object-contain\r\n`;\r\n","import { useGetProductsByCategory } from \"../../queries/products/hooks/useGetProductsByCategory\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useContext } from \"react\";\r\nimport { CartContext } from \"../../context/CartContext\";\r\nimport {\r\n  ProductsContainer,\r\n  ProductContainer,\r\n  ProductImg,\r\n} from \"../../styles/styledProducts\";\r\nimport { AddToCartButton } from \"../../styles/styledButtons\";\r\n\r\nconst Categories = () => {\r\n  const { category } = useParams();\r\n\r\n  const cart = useContext(CartContext);\r\n\r\n  const { data, isInitialLoading, isError, error } =\r\n    useGetProductsByCategory(category);\r\n\r\n  if (isInitialLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (isError) {\r\n    return <div>{error.message}</div>;\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <div>\r\n        <h2>{category}</h2>\r\n        <ProductsContainer>\r\n          {data &&\r\n            data.map((product) => (\r\n              <ProductContainer key={product.id}>\r\n                <Link to={`/product/${product.id}`}>\r\n                  <h3>{product.productname}</h3>\r\n                  <ProductImg\r\n                    src={`${product.product_img_url}`}\r\n                    alt={`${product.productname}`}\r\n                  />\r\n                </Link>\r\n                {product.stock < 1 ? (\r\n                  <AddToCartButton className=\"bg-primary-green\" disabled>\r\n                    Out of stock\r\n                  </AddToCartButton>\r\n                ) : (\r\n                  <AddToCartButton\r\n                    onClick={() =>\r\n                      cart.addOneToCart(\r\n                        product.id,\r\n                        product.productname,\r\n                        product.price,\r\n                        product.stock\r\n                      )\r\n                    }\r\n                  >\r\n                    Add to cart\r\n                  </AddToCartButton>\r\n                )}\r\n              </ProductContainer>\r\n            ))}\r\n        </ProductsContainer>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","import { useQuery } from \"@tanstack/react-query\";\r\nimport { getProductsByCategory } from \"../Products\";\r\n\r\nexport const useGetProductsByCategory = (category) => {\r\n  return useQuery({\r\n    queryKey: [\"products-by-category\", category],\r\n    queryFn: () => getProductsByCategory(category),\r\n    enabled: !!category,\r\n  });\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst productsApi = axios.create({\r\n  baseURL: \"http://localhost:3000\",\r\n});\r\n\r\nexport const getAllProducts = async () => {\r\n  const response = await productsApi.get(\"/api/products\");\r\n  return response.data;\r\n};\r\n\r\nexport const getProductById = async (id) => {\r\n  const response = await productsApi.get(`/api/products/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const getProductsByCategory = async (category) => {\r\n  const response = await productsApi.get(`/api/products/category/${category}`);\r\n  return response.data;\r\n};\r\n\r\nexport const createProduct = async (newProduct) => {\r\n  await productsApi.post(`/api/products`, newProduct);\r\n};\r\n\r\nexport const updateProduct = async (updatedProduct) => {\r\n  const { id } = updatedProduct;\r\n  await productsApi.put(`/api/products/${id}`, updatedProduct);\r\n};\r\n\r\nexport const deleteProduct = async (id) => {\r\n  await productsApi.delete(`/api/products/${id}`);\r\n};\r\n\r\nexport const searchProduct = async (searchWord) => {\r\n  const response = await productsApi.get(`/api/products/search/${searchWord}`);\r\n  return response.data;\r\n};\r\n"],"names":["ProductsContainer","tw","ProductContainer","ProductImg","category","useParams","cart","useContext","CartContext","useQuery","queryKey","queryFn","getProductsByCategory","enabled","useGetProductsByCategory","data","isInitialLoading","isError","error","message","map","product","to","id","productname","src","product_img_url","alt","stock","className","disabled","onClick","addOneToCart","price","productsApi","axios","baseURL","getProductById","get","response","createProduct","newProduct","post","updateProduct","updatedProduct","put","deleteProduct","delete","searchProduct","searchWord"],"sourceRoot":""}